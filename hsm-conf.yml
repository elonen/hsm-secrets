# This is a configuration file for the 'hsm-secrets' tool.
# It is used to generate keys and certificates for the YubiHSM 2.
#
# Most keys are provided in RSA, Ed25519 and NIST EC formats.
# Ed25519 is recommended whenever possible, RSA (super slow on YubiHSM) is for compatibility with older systems.
# NIST EC is fast but has suffered from past implementation weaknesses, backdoor suspicions, etc.

general:
    master_device: "27600137"   # Serial number of the YubiHSM 2 that is cloning source for other devices.
    all_devices: {
        "27600137": "yhusb://serial=27600137",  # For `yubihsm-connector`: http://localhost:12345
        "27600136": "yhusb://serial=27600136",
        "27600135": "yhusb://serial=27600135",
    }

    domains:
        # These domain numbers separate different types of objects in the YubiHSM 2.
        # The names are used by the hsm-secrets tool for clarity, not by the device itself.
        x509: 2
        tls: 3
        nac: 4
        gpg: 5
        codesign: 6
        ssh: 7
        password_derivation: 8
        encryption: 9

    x509_defaults:
        ca: true
        path_len: 0             # Allow end-entity certificate signing only, by default
        validity_days: 3650
        key_usage:
            - digitalSignature
            - keyAgreement
            - keyCertSign
            - cRLSign
        extended_key_usage:
            - serverAuth
            - clientAuth
            - timeStamping
        attribs:
            country: US
            state: Calisota
            locality: Duckburg
            organization: Example Inc.
            common_name: '__ERROR__UNDEFINED__'

# Subsystem for YubiHSM 2 device admin auth keys.
admin:
    default_admin_password: 'password'

    # Default admin key ('password') for the YubiHSM 2.
    # This is used during intial setup and temporarily restored using the shared key
    # during subsequent key management operations.
    default_admin_key:
        label: "DEFAULT AUTHKEY CHANGE THIS ASAP"   # original label for the default key
        id: 0x0001
        domains: ['all']
        capabilities: ['all']
        delegated_capabilities: ['all']

    # K-of-N split shared secret for super-admin access.
    # This is a 128 bit password-derived key, split into
    # custodian shares during setup.
    #
    # Sharing and recombining is done in software, not in the HSM,
    # so it should be done on an air-gapped machine like the initial setup.
    shared_admin_key:
        label: shared-admin
        id: 0x0002
        domains: ['all']
        capabilities: ['all']
        delegated_capabilities: ['all']

    # Wrap key for exporting/importing keys securely between YubiHSM 2 devices.
    # Used for cloning devices.
    wrap_key:
        label: wrap-key
        id: 0x000F
        algorithm: aes256-ccm-wrap
        domains: ['all']
        capabilities: ["wrap-data", "unwrap-data", "export-wrapped", "import-wrapped", "exportable-under-wrap"]
        delegated_capabilities: ['all']


# User keys are for general use by human operators.
#
# These should be YubiKey -authenticated, and used for interactive operations,
# i.e. manually calling day-to-day scripts that sign HTTPS certificates, SSH keys, etc.
#
# They aren't supposed to be able to export or create other keys, only use them.
user_keys:
    - label: user_john.doe
      id: 0xE001
      domains: ['tls', 'nac', 'gpg', 'codesign', 'ssh', 'password_derivation', 'encryption']
      capabilities:
        - sign-ssh-certificate          # For SSH certificate creation
        - sign-hmac                     # For password derivation
        - verify-hmac                   # For verifying message authenticity
        - sign-pss                      # X.509 signing in RSA
        - sign-pkcs                     # (--||--, but older PKCS#1 v1.5, not recommended)
        - sign-eddsa                    # X.509 signing in Ed25519
        - sign-ecdsa                    # X.509 signing in EC
        - encrypt-cbc                   # General AES symmetric data encryption
        - decrypt-cbc                   # (--||--)
        - encrypt-ecb                   # (non-chained AES, not recommended for general use)
        - decrypt-ecb                   # (--||--)
        - get-pseudo-random             # For generating random salts
        - change-authentication-key     # For changing this key's credentials
        - sign-attestation-certificate  # For proving some other key is protected by an HSM
        - exportable-under-wrap         # Allows replication of the key to another HSM for backup/HA
        - get-opaque                    # For getting certificates stored in the HSM
        - export-wrapped                # For backup
        - import-wrapped                # For backup restore (in case service keys are DoSed by `change-authentication-key`)
      delegated_capabilities: []        # (No delegated capabilities, as this cannot create new keys to delegate to)
      # TODO: Need to split this key into separate keys for different purposes? Would it give any real security benefit?


# Service keys are for automated use by services, probably less well authenticated than user keys.
# These should be strictly domain-limited, and have limited capabilities.
service_keys:

    # Dedicated audit key for reviewing logs.
    # The log listings form a continuous blockchain and the `get-log-entries` wipes the log.
    # => Each call must be made consciously and must store the results to uphold the chain of evidence.
    # This is why the user keys are not allowed to call this capability wantonly.
    -
        label: log-audit
        id: 0x0008
        domains: ['all']
        capabilities: ['get-log-entries', 'exportable-under-wrap']
        delegated_capabilities: []

    # Service key for NAC (Network Access Control) for
    # signing 802.1X EAP-TLS certificates.
    -
        label: service_nac
        id: 0xD010
        domains: ['nac']
        capabilities:
                - sign-pss
                - sign-pkcs
                - sign-ecdsa
                - sign-eddsa
                - sign-hmac
                - get-pseudo-random
                - exportable-under-wrap
                - change-authentication-key  # Could allow DoS on the key, but lesser evil than not being able to rotate it
        delegated_capabilities: []


# Subsystem/domain for root CAs.
# Intermediate CAs in other subsystems (TLS, X.509, ..) are signed by these.
#
# Usage: Generate a root CA with OpenSSL using these as private keys.
# Generate attestation certificates for the root CAs when creating them, and store them
# separately (they are not sensitive, but cannot be easily recreated),
# as user keys cannot access the root CA keys directly.
x509:
    root_certs:
        -
          key:
            label: ca-root-key-rsa
            id: 0x0210
            domains: ['x509']
            algorithm: rsa4096
            capabilities:
                - sign-pss  # prefer this for RSA
                - sign-pkcs
                - exportable-under-wrap
          x509_info:
            path_len: 2
            attribs:
                common_name: 'Example Root A1'
            key_usage:
                - keyCertSign
                - cRLSign
            extended_key_usage: []
          signed_certs:
            - id: 0x0211
              label: ca-root-cert-rsa
              domains: ['x509', 'tls', 'nac', 'gpg', 'codesign']   # Allow the signed root cert to be read by all services
              algorithm: opaque-x509-certificate
              sign_by: 0x0211   # Root CA signs its own certificate
        -
          key:
            label: ca-root-key-ed25519
            id: 0x0220
            domains: ['x509']
            algorithm: ed25519
            capabilities:
                - sign-eddsa
                - exportable-under-wrap
          x509_info:
            path_len: 2
            attribs:
                common_name: 'Example Root A1'
            key_usage:
                - keyCertSign
                - cRLSign
            extended_key_usage: []
          signed_certs:
            - id: 0x0221
              label: ca-root-cert-ed25519
              domains: ['x509', 'tls', 'nac', 'gpg', 'codesign']
              algorithm: opaque-x509-certificate
              sign_by: 0x0221
        -
            key:
                label: ca-root-key-ecp384
                id: 0x0230
                domains: ['x509']
                algorithm: ecp384
                capabilities:
                    - sign-ecdsa
                    - exportable-under-wrap
            x509_info:
                path_len: 2
                attribs:
                    common_name: 'Example Root A1'
                key_usage:
                    - keyCertSign
                    - cRLSign
                extended_key_usage: []
            signed_certs:
                - id: 0x0231
                  label: ca-root-cert-ecp384
                  domains: ['x509', 'tls', 'nac', 'gpg', 'codesign']
                  algorithm: opaque-x509-certificate
                  sign_by: 0x0231

# TLS (HTTPS, TCP, ...) intermediate keys.
tls:
    default_ca_id: 0x0333
    intermediate_certs:
        -
          key:
            label: tls-rsa-intermediate-key
            id: 0x0310
            domains: ['tls']
            algorithm: rsa4096
            capabilities:
                - sign-pss
                - sign-pkcs
                - exportable-under-wrap
          x509_info:
            attribs:
                common_name: 'Example TLS Intermediate I1'
            name_constraints:
                permitted:
                    dns:
                        - .hsm.biz
                        - .hsm.ext
                        - .hsm.local
                        - .hsm.service
                        - .example.directory
                        - .example.com
                        - .example.biz
                    ip:
                        - 10.123.0.0/21
                        - fd12:3456:78::/48
                        - 2a01:2345:6::/48
            extended_key_usage:
                - serverAuth
                - clientAuth
                - timeStamping
          signed_certs:
            - id: 0x0311
              label: tls-rsa-intermediate-cert
              domains: ['tls']    # Only allow TLS services to read this cert
              algorithm: opaque-x509-certificate
              sign_by: 0x0211   # RSA Root CA
        -
          key:
            label: tls-ed25519-intermediate-key
            id: 0x0320
            domains: ['tls']
            algorithm: ed25519
            capabilities:
                - sign-eddsa
                - exportable-under-wrap
          x509_info:
            attribs:
                common_name: 'Example TLS Intermediate I1'
            name_constraints:
                permitted:
                    dns:
                        - .hsm.biz
                        - .hsm.ext
                        - .hsm.local
                        - .hsm.service
                        - .example.directory
                        - .example.com
                        - .example.biz
                    ip:
                        - 10.123.0.0/21
                        - fd12:3456:78::/48
                        - 2a01:2345:6::/48
            extended_key_usage:
                - serverAuth
                - clientAuth
                - timeStamping
          signed_certs:
            - id: 0x0321
              label: tls-ed25519-intermediate-cert-rsaroot
              domains: ['tls']
              algorithm: opaque-x509-certificate
              sign_by: 0x0211   # RSA Root CA
            - id: 0x0322
              label: tls-ed25519-intermediate-cert-edroot
              domains: ['tls']
              algorithm: opaque-x509-certificate
              sign_by: 0x0221   # Ed25519 Root CA
            - id: 0x0323
              label: tls-ed25519-intermediate-cert-ecroot
              domains: ['tls']
              algorithm: opaque-x509-certificate
              sign_by: 0x0231   # ECP384 Root CA

        -
          key:
            label: tls-ecp384-intermediate-key
            id: 0x0330
            domains: ['tls']
            algorithm: ecp384
            capabilities:
                - sign-ecdsa
                - exportable-under-wrap
          x509_info:
            attribs:
                common_name: 'Example TLS Intermediate I1'
            name_constraints:
                permitted:
                    dns:
                        - .hsm.biz
                        - .hsm.ext
                        - .hsm.local
                        - .hsm.service
                        - .example.directory
                        - .example.com
                        - .example.biz
                    ip:
                        - 10.123.0.0/21
                        - fd12:3456:78::/48
                        - 2a01:2345:6::/48
            extended_key_usage:
                - serverAuth
                - clientAuth
                - timeStamping
          signed_certs:
            - id: 0x0331
              label: tls-ecp384-intermediate-cert-rsaroot
              domains: ['tls']
              algorithm: opaque-x509-certificate
              sign_by: 0x0211   # RSA Root CA
            - id: 0x0333
              label: tls-ecp384-intermediate-cert-ecroot
              domains: ['tls']
              algorithm: opaque-x509-certificate
              sign_by: 0x0231   # ECP384 Root CA


# NAC (Network Access Control) intermediate keys for 802.1X
nac:
    intermediate_certs:
        -
          key:
            label: nac-rsa-intermediate-key
            id: 0x0410
            domains: ['nac']
            algorithm: rsa4096
            capabilities:
                - sign-pss  # preferred
                - sign-pkcs
                - exportable-under-wrap
          x509_info:
            path_len: 1  # NAC servers may need their own CAs, so allow one level of intermediates
            attribs:
                common_name: 'Example NAC Intermediate N1'
                subject_alt_names:
                    dns:
                      - 'nac.hsm.biz'
                      - 'nac.example.directory'
            extended_key_usage:
                - serverAuth
                - clientAuth
                - timeStamping
          signed_certs:
            - id: 0x0411
              label: nac-rsa-intermediate-cert
              domains: ['nac']
              algorithm: opaque-x509-certificate
              sign_by: 0x0211
        -
          key:
            label: nac-ecp384-intermediate-key
            id: 0x0430
            domains: ['nac']
            algorithm: ecp384
            capabilities:
                - sign-ecdsa
                - exportable-under-wrap
          x509_info:
            path_len: 1
            attribs:
                common_name: 'Example NAC Intermediate N1'
                subject_alt_names:
                    dns:
                      - 'nac.hsm.biz'
                      - 'nac.example.directory'
            extended_key_usage:
                - serverAuth
                - clientAuth
                - timeStamping
          signed_certs:
            - id: 0x0433
              label: nac-ecp384-intermediate-cert
              domains: ['nac']
              algorithm: opaque-x509-certificate
              sign_by: 0x0231


# GPG/OpenPGP keys
# for future use, PKCS#11 support in GPG is not very good atm
#
# RSA keys can be used for both SCA (Sign, Certify, Authenticate) and E (Encrypt) operations in GnuPG, but
# it is recommended to use separate keys for these purposes, so make two keys here. Allow both sign & crypt
# operations on both keys though, to avoid future problems.
#
# Ed25519 keys are only for SCA operations. There's an x25519 (aka cv25519) key type for E operations in GnuPG,
# but the operation is apparently not supported by YubiHSM 2.
gpg:
    keys:
    -
        label: gpg-main-rsa-sca
        id: 0x0510
        domains: ['gpg']
        algorithm: rsa4096
        capabilities:
            - sign-pss  # preferred
            - sign-pkcs
            - decrypt-oaep
            - decrypt-pkcs
            - exportable-under-wrap
    -
        label: gpg-main-rsa-e
        id: 0x0511
        domains: ['gpg']
        algorithm: rsa4096
        capabilities:
            - sign-pss  # preferred
            - sign-pkcs
            - decrypt-oaep  # preferred
            - decrypt-pkcs
            - exportable-under-wrap
    -
        label: gpg-main-ed25519
        id: 0x0520
        domains: ['gpg']
        algorithm: ed25519
        capabilities:
            - sign-eddsa
            - exportable-under-wrap
    -
        label: gpg-main-ecp384
        id: 0x0530
        domains: ['gpg']
        algorithm: ecp384
        capabilities:
            - sign-ecdsa
            - derive-ecdh           # derive AES keys for symmetric encryption
            - exportable-under-wrap



# Code signing keys for signing software, firmware, etc.
codesign:
    intermediate_certs:
    -
      key:
        label: codesign-rsa-intermediate-key
        id: 0x0610
        domains: ['codesign']
        algorithm: rsa4096
        capabilities:
            - sign-pss
            - sign-pkcs
            - exportable-under-wrap
      x509_info:
        attribs:
            common_name: 'Example Code Signing Intermediate S1'
        key_usage:
            - digitalSignature
            - keyCertSign
            - cRLSign
        extended_key_usage:
            - codeSigning
            - timeStamping
      signed_certs:
        - id: 0x0611
          label: codesign-rsa-intermediate-cert
          domains: ['codesign']
          algorithm: opaque-x509-certificate
          sign_by: 0x0211
    -
      key:
        label: codesign-ecp384-intermediate-key
        id: 0x0620
        domains: ['codesign']
        algorithm: ecp384
        capabilities:
            - sign-eddsa
            - exportable-under-wrap
      x509_info:
        attribs:
            common_name: 'Example Code Signing Intermediate S1'
        key_usage:
            - digitalSignature
            - keyCertSign
            - cRLSign
        extended_key_usage:
            - codeSigning
            - timeStamping
      signed_certs:
        - id: 0x0633
          label: codesign-ecp384-intermediate-cert
          domains: ['codesign']
          algorithm: opaque-x509-certificate
          sign_by: 0x0231


# Certificate-based SSH authentication keys.
# OpenSSH certificates are in proprietary format, so these are not signed by the X.509 root CAs.
ssh:
    default_ca: 0x0720
    root_ca_keys:
        -
            label: ssh-rsa-ca-root-key
            id: 0x0710
            domains: ['ssh']
            algorithm: rsa4096
            capabilities:
                - sign-ssh-certificate
                - sign-pss
                - sign-pkcs
                - exportable-under-wrap
        -
            label: ssh-ed25519-ca-root-key
            id: 0x0720
            domains: ['ssh']
            algorithm: ed25519
            capabilities:
                - sign-ssh-certificate
                - sign-eddsa
                - exportable-under-wrap
            # generate asymmetric 0 0x0200 ssh-ed25519-ca-root-key all sign-pkcs,sign-ssh-certificate ed25519
            # get pubkey 0 0x0200 ssh-ed25519-ca-root-key.pub.pem
        -
            label: ssh-ecp384-ca-root-key
            id: 0x0730
            domains: ['ssh']
            algorithm: ecp384
            capabilities:
                - sign-ssh-certificate
                - sign-ecdsa
                - exportable-under-wrap


# For deriving unique passwords from usernames, hostnames, etc.
password_derivation:
    keys:
      - label: pw-derivation-1
        id: 0x0810
        domains: ['password_derivation']
        algorithm: hmac-sha256    # 60x faster than hmac-sha512 on YubiHSM 2
        capabilities:
          - sign-hmac
          - verify-hmac
          - exportable-under-wrap

    default_rule: host-root-passwords

    rules:
      - id: host-root-passwords
        key: 0x0810
        format: bip39
        separator: '.'      # Separate password parts with a '.' instead of '-' (or space) to avoid keyboard layout issues
        bits: 64            # 64 should be fine for yescrypt / bcrypt etc, Use 128 if the password is hashed with a weak scheme like NTLM
        rotation_tokens:
          # List of tool-generated tokens that rotate password for a specific host (or all if name_hmac is None).
          # - `name_hmac` is the HMAC of the name, so each name can be rotated independently. If missing, the rule applies to all passwords.
          # - Nonce prevents current HSM operators from pre-generating rotated passwords before they leave the team.
          # - Timestamp is used to order the rotations, so that displayng previous passwords (e.g. in case of a rollback) is possible.
          - {name_hmac: 0x4b2d9547f720ec540a9edda5d33f3aa68719cc5891a9b08df3382229cfc90670, nonce: 0x379cb049d15b37ab, ts: 1721727172}


# For generic encryption of secrets, passwords, etc.
# (For limited and infrequent use, YubiHSM is not very fast)
encryption:
    keys:
    - label: enc-1
      id: 0x0910
      domains: ['encryption']
      algorithm: aes256
      capabilities:
        - encrypt-cbc   # prefer CBC over ECB unless you have a good reason
        - decrypt-cbc
        - encrypt-ecb
        - decrypt-ecb
        - exportable-under-wrap
